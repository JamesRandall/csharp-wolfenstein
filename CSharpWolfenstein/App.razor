@page "/"
@using CSharpWolfenstein.Assets
@using CSharpWolfenstein.Engine
@using CSharpWolfenstein.Engine.RayCasting
@using CSharpWolfenstein.Game
<div class="container" tabindex="0">
    <div class="row">
        <div class="canvas-container">
            <SKCanvasView OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true" EnableRenderLoop="true" />
        </div>
    </div>
</div>

@inject HttpClient HttpClient;
@implements IDisposable
@inject IJSRuntime JS
@code {
    // Worth noting that the renderer is about 50% slower when you use Web GL. My assumption is that you end up
    // interop-ing more than it seems, another copy of the byte array for the surface would cause about the level of
    // slowdown I saw. But 2D canvas is fine - after all, just a 2D game.
    
    private DotNetObjectReference<App>? _objRef;
    private AbstractGameEngine? _gameEngine;

    protected override async Task OnInitializedAsync()
    {
        var assetPack = await AssetPack.Load(HttpClient, Constants.CanvasZoom, (Constants.WolfViewportWidth,Constants.WolfViewportHeight));
        var game = GameState.NewGame(assetPack, DifficultyLevel.IAmDeathIncarnate);
        _gameEngine = new GameEngine(assetPack, game, new(WallRenderer.RenderWalls, new RayCaster()));
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("configureGameEvents", _objRef, "boo");
        }
    }

    private ControlState ControlStateFromKey(string key) =>
        key switch
        {
            "ArrowUp" => ControlState.Forward,
            "ArrowDown" => ControlState.Backward,
            "ArrowLeft" => ControlState.TurningLeft,
            "ArrowRight" => ControlState.TurningRight,
            _ => ControlState.None
        };

    [JSInvokable]
    public void OnKeyDown(string value)
    {
        if (_gameEngine == null) return;
        System.Console.WriteLine(value);
        if (value.ToLower() == "t")
        {
            _gameEngine = _gameEngine switch
            {
                GameEngine ge => new RayCastDemonstrationEngine(ge, new(WallRenderer.RenderWalls, new StepRayCaster())),
                RayCastDemonstrationEngine re => new GameEngine(re, new(WallRenderer.RenderWalls, new RayCaster())),
                _ => throw new GameEngineNotRecognizedException()
            };
        }
        else
        {
            var controlState = ControlStateFromKey(value);
            _gameEngine.OnKeyDown(controlState);
        }
    }

    [JSInvokable]
    public void OnKeyUp(string value)
    {
        if (_gameEngine == null) return;
        var controlState = ControlStateFromKey(value);
        _gameEngine.OnKeyUp(controlState);
    }
    
    public void Dispose()
    {
        _objRef?.Dispose();
    }

    object _monitor = new object();
    
    protected void OnPaintSurface(SKPaintSurfaceEventArgs e)
    {
        if (_gameEngine == null) return;
        // the monitor prevents colliding frames in the event (pun intended) of a lengthy frame render time
        if (Monitor.TryEnter(_monitor))
        {
            _gameEngine.NewFrame(e);
            Monitor.Exit(_monitor);
        }
    }
}